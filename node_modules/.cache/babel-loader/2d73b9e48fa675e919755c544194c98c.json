{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Anonymous\\\\Desktop\\\\Work\\\\WebDevOp\\\\Bckup\\\\Libros---Final--main\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Anonymous\\\\Desktop\\\\Work\\\\WebDevOp\\\\Bckup\\\\Libros---Final--main\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\Anonymous\\\\Desktop\\\\Work\\\\WebDevOp\\\\Bckup\\\\Libros---Final--main\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Anonymous\\\\Desktop\\\\Work\\\\WebDevOp\\\\Bckup\\\\Libros---Final--main\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Anonymous\\\\Desktop\\\\Work\\\\WebDevOp\\\\Bckup\\\\Libros---Final--main\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Anonymous\\\\Desktop\\\\Work\\\\WebDevOp\\\\Bckup\\\\Libros---Final--main\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Anonymous\\\\Desktop\\\\Work\\\\WebDevOp\\\\Bckup\\\\Libros---Final--main\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Anonymous\\\\Desktop\\\\Work\\\\WebDevOp\\\\Bckup\\\\Libros---Final--main\\\\src\\\\App.js\";\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport * as BooksAPI from './BooksAPI';\nimport './App.css';\n/* \n  * ---------------------\n  * Import All Components\n  * ---------------------\n*/\n\nimport LibrosSearchPage from './components/LibrosSearchPage';\nimport LibrosMainPage from './components/LibrosMainPage'; //import LibrosBookShelf from './components/LibrosBooks';\n\n/*\n  *\n  * BooksApp is the main app.js component\n  * \n*/\n\nvar BooksApp =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(BooksApp, _React$Component);\n\n  function BooksApp(props) {\n    var _this;\n\n    _classCallCheck(this, BooksApp);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BooksApp).call(this, props));\n\n    _this.updateLibrosBooksSearched = function (query) {\n      var LibrosSearchedShelf;\n\n      if (query) {\n        BooksAPI.search(query).then(function (books) {\n          if (books.error) {\n            _this.setState({\n              booksSearched: []\n            });\n          } else {\n            LibrosSearchedShelf = books.map(function (book) {\n              book.shelf = _this.librosSyncedShelf(book);\n              return book;\n            });\n\n            _this.setState({\n              booksSearched: LibrosSearchedShelf\n            });\n          }\n        });\n      } else {\n        _this.setState({\n          booksSearched: []\n        });\n      }\n    };\n\n    _this.updateLibrosShelf = function (book, shelf) {\n      BooksAPI.update(book, shelf).then(function () {\n        BooksAPI.getAll().then(function (books) {\n          _this.setState({\n            booksonDisplay: books\n          });\n        });\n      });\n    };\n\n    _this.librosSyncedShelf = function (book) {\n      var updatedMatchedShelf = _this.state.booksonDisplay.filter(function (bookonDisplay) {\n        return book.id === bookonDisplay.id;\n      });\n\n      return updatedMatchedShelf.length ? updatedMatchedShelf[0].shelf : undefined;\n    };\n\n    _this.state = {\n      /*\n      *                 --> List of Books -> ./App.js\n      * State Structure --> Query(Search) -> /components/LibrosSearchPage       \n      *                 --> List of Books Searched -> /components/LibrosSearchPage \n      */\n      //booksSearched:[] and BooksOnDisplay are added as Array's  to the state {}\n      booksSearched: [],\n      booksonDisplay: []\n    };\n    return _this;\n  } //get all books using an async function with await response to display books\n\n\n  _createClass(BooksApp, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var books;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return BooksAPI.getAll();\n\n              case 2:\n                books = _context.sent;\n                this.setState({\n                  booksonDisplay: books\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      };\n    }()\n    /*\n    *         \n    * updateLibrosBooksSearched is an arrow function which handles Errors\n    * If there is an error in booksSearched\n    * Display Empty array booksSearched instead \n    * Of Giving TypeError\n    */\n\n  }, {\n    key: \"render\",\n\n    /*\n      * Rendering Components <SearchPage/>\n      * With exact path added to <Route> \n      * to let user Book mark URL \n    */\n    //exact path added here to make sure its directing to the exact directories\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          booksonDisplay = _this$state.booksonDisplay,\n          booksSearched = _this$state.booksSearched; //console.log(this.state.books);\n\n      /*\n      * Route Structure Hiearchy\n      * <App/>\n      *   <LibrosMainPage/>\n      *       <SearchPage/>\n      *         \n      * \n      */\n\n      return React.createElement(\"div\", {\n        className: \"app\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(Route, {\n        exact: true,\n        path: \"/\",\n        render: function render() {\n          return React.createElement(LibrosMainPage, {\n            books: booksonDisplay,\n            updateLibrosShelf: _this2.updateLibrosShelf,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 140\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }), React.createElement(Route, {\n        exact: true,\n        path: \"/search\",\n        render: function render() {\n          return React.createElement(LibrosSearchPage, {\n            books: booksSearched,\n            updateLibrosBooksSearched: _this2.updateLibrosBooksSearched,\n            updateLibrosShelf: _this2.updateLibrosShelf,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 150\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return BooksApp;\n}(React.Component);\n\nexport default BooksApp;","map":{"version":3,"sources":["C:\\Users\\Anonymous\\Desktop\\Work\\WebDevOp\\Bckup\\Libros---Final--main\\src\\App.js"],"names":["React","Route","BooksAPI","LibrosSearchPage","LibrosMainPage","BooksApp","props","updateLibrosBooksSearched","query","LibrosSearchedShelf","search","then","books","error","setState","booksSearched","map","book","shelf","librosSyncedShelf","updateLibrosShelf","update","getAll","booksonDisplay","updatedMatchedShelf","state","filter","bookonDisplay","id","length","undefined","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Route } from 'react-router-dom';\nimport * as BooksAPI from './BooksAPI';\nimport './App.css';\n\n\n/* \n  * ---------------------\n  * Import All Components\n  * ---------------------\n*/\n\n\nimport LibrosSearchPage from './components/LibrosSearchPage';\nimport LibrosMainPage from './components/LibrosMainPage';\n//import LibrosBookShelf from './components/LibrosBooks';\n\n\n/*\n  *\n  * BooksApp is the main app.js component\n  * \n*/\n\n\nclass BooksApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      /*\n      *                 --> List of Books -> ./App.js\n      * State Structure --> Query(Search) -> /components/LibrosSearchPage       \n      *                 --> List of Books Searched -> /components/LibrosSearchPage \n      */\n      //booksSearched:[] and BooksOnDisplay are added as Array's  to the state {}\n\n      booksSearched: [],\n      booksonDisplay: [],\n    }\n  }\n\n\n\n  //get all books using an async function with await response to display books\n\n  async componentDidMount() {\n    const books = await BooksAPI.getAll()\n    this.setState({ booksonDisplay: books })\n  }\n\n\n\n  /*\n  *         \n  * updateLibrosBooksSearched is an arrow function which handles Errors\n  * If there is an error in booksSearched\n  * Display Empty array booksSearched instead \n  * Of Giving TypeError\n  */\n\n\n  updateLibrosBooksSearched = (query) => {\n    let LibrosSearchedShelf\n    if (query) {\n      BooksAPI.search(query).then(books => {\n        if (books.error) {\n          this.setState({ booksSearched: [] })\n        } else {\n          LibrosSearchedShelf = books.map(book => {\n            book.shelf = this.librosSyncedShelf(book);\n            return book;\n          })\n          this.setState({ booksSearched: LibrosSearchedShelf })\n        }\n      })\n    } else {\n      this.setState({ booksSearched: [] })\n    }\n  }\n\n\n  /*  \n       *\n       *  updateLibrosShelf is used to Update State and passed through the LibrosMainPage\n       *  then through LibrosBookShelf.js\n       * \n   */\n\n\n  updateLibrosShelf = (book, shelf) => {\n\n    BooksAPI.update(book, shelf).then(() => {\n      BooksAPI.getAll().then((books) => {\n        this.setState({ booksonDisplay: books })\n      })\n    })\n  }\n\n\n  /*  \n       *\n       *  librosSyncedShelf is used to filter and compare bookonDisplay with book.id\n       *  then through LibrosBookShelf.js\n       * \n   */\n\n\n  librosSyncedShelf = (book) => {\n    let updatedMatchedShelf = this.state.booksonDisplay.filter(bookonDisplay =>\n      book.id === bookonDisplay.id\n    )\n    return updatedMatchedShelf.length ? updatedMatchedShelf[0].shelf : undefined\n  }\n\n\n  /*\n    * Rendering Components <SearchPage/>\n    * With exact path added to <Route> \n    * to let user Book mark URL \n  */\n\n\n  //exact path added here to make sure its directing to the exact directories\n\n\n  render() {\n    const { booksonDisplay, booksSearched } = this.state;\n    //console.log(this.state.books);\n    /*\n    * Route Structure Hiearchy\n    * <App/>\n    *   <LibrosMainPage/>\n    *       <SearchPage/>\n    *         \n    * \n    */\n    return (\n      <div className=\"app\">\n        <Route exact path=\"/\" render={() => (\n          <LibrosMainPage\n            books={booksonDisplay}\n            updateLibrosShelf={this.updateLibrosShelf}\n          />\n        )}>\n        </Route>\n        {/*\n        Passed booksSearched here and is updated aswell \n        */}\n        <Route exact path=\"/search\" render={() => (\n          <LibrosSearchPage\n            books={booksSearched}\n            updateLibrosBooksSearched={this.updateLibrosBooksSearched}\n            updateLibrosShelf={this.updateLibrosShelf}\n          />\n        )}>\n        </Route>\n      </div>\n    );\n  }\n}\n\n\nexport default BooksApp;\n\n\n"]},"metadata":{},"sourceType":"module"}